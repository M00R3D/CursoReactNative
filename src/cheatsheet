// Imports y configuraci칩n b치sica
import React, { useState } from 'react';
import { create } from 'zustand';

// Componentes importados (simulaci칩n para demo)
export const FormsPage = () => <div>Formulario</div>;
export const UsersPage = () => <div>Usuarios</div>;

// Hook de contador personalizado
interface Options {
  initialValue: number;
}

export const useCounter = ({ initialValue }: Options) => {
  const [count, setCount] = useState<number>(initialValue);

  const increaseBy = (value: number) => {
    const newCount = count + value;
    if (newCount < 0) return;
    setCount(newCount);
  };

  return { count, increaseBy };
};

// Estado global con Zustand
interface AuthState {
  status: 'authenticated' | 'unauthenticated' | 'checking';
  token?: string;
  user?: {
    name: string;
    email: string;
  };
  login: (email: string, password: string) => void;
  logout: () => void;
}

export const useAuthStore = create<AuthState>((set) => ({
  status: 'checking',
  token: undefined,
  user: undefined,
  login: (email, password) => {
    set({
      status: 'authenticated',
      token: 'ABC12',
      user: { name: 'John Doe', email: email },
    });
  },
  logout: () => set({ status: 'unauthenticated', token: undefined, user: undefined }),
}));

// Componentes individuales
export const BasicTypes = () => {
  const name: string = 'Job';
  const age: number = 20;
  const isActive: boolean = true;
  const powers: string[] = ['React', 'ReactNative', 'Angular', 'Vue', 'Qwik'];

  return (
    <>
      <h3>Tipos</h3>
      {name} {age} {isActive ? 'true' : 'false'}
      <br />
      {powers.join(', ')}
    </>
  );
};

export const BasicFunctions = () => {
  const addTwoNumber = (a: number, b: number): string => (a + b).toString();

  return (
    <>
      <h3>Funciones</h3>
      <span>El resultado de sumar: {addTwoNumber(2, 8)}</span>
    </>
  );
};

interface Address {
  country: string;
  houseNo: number;
}

interface Person {
  firstName: string;
  fullName: string;
  age: number;
  address: Address;
  isAlive?: boolean;
}

export const ObjectLiterals = () => {
  const person: Person = {
    firstName: 'Jimmy',
    fullName: 'Jason',
    age: 22,
    address: { country: 'Mexico', houseNo: 666 },
    isAlive: true,
  };

  return (
    <>
      <h3>Objetos Literales</h3>
      <pre>{JSON.stringify(person, null, 2)}</pre>
    </>
  );
};

// Componente contador usando estado
export const Counter = () => {
  const [count, setCount] = useState(10);

  const increaseBy = (value: number) => setCount(count + value);

  return (
    <>
      <h3>Contador: <small>{count}</small></h3>
      <button onClick={() => increaseBy(1)}>+1</button>
      <button onClick={() => increaseBy(-1)}>-1</button>
    </>
  );
};

// Componente contador con hook personalizado
export const CounterWithHook = () => {
  const { count, increaseBy } = useCounter({ initialValue: 5 });

  return (
    <>
      <h3>Contador con Hook: <small>{count}</small></h3>
      <button onClick={() => increaseBy(1)}>+1</button>
      <button onClick={() => increaseBy(-1)}>-1</button>
    </>
  );
};

// Interfaces para respuestas de API
export interface ReqResUserListResponse {
  page: number;
  per_page: number;
  total: number;
  total_pages: number;
  data: User[];
  support: Support;
}

export interface User {
  id: number;
  email: string;
  first_name: string;
  last_name: string;
  avatar: string;
}

export interface Support {
  url: string;
  text: string;
}

// Componente principal App
function App() {
  return (
    <main>
      <h1>Introducci칩n a React</h1>
      <BasicTypes />
      <BasicFunctions />
      <ObjectLiterals />
      <Counter />
      <CounterWithHook />
      <FormsPage />
      <UsersPage />
    </main>
  );
}

export default App;
